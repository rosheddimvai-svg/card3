from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# === Bot Token ржПржмржВ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ ===
TOKEN = "7845699149:AAEEKpzHFt5gd6LbApfXSsE8de64f8IaGx0"

PENDING_CHANNEL = -1003036699455
APPROVED_CHANNEL = -1002944346537
BROADCAST_CHANNEL = -1003018121134

# ржЗржЙржЬрж╛рж░ржжрзЗрж░ рж▓рж┐рж╕рзНржЯ (broadcast ржПрж░ ржЬржирзНржп)
user_list = set()


# === Start Menu ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_list.add(user.id)  # ржкрзНрж░рждрж┐ржЯрж╛ ржЗржЙржЬрж╛рж░ рж╕рзЗржн рж╣ржмрзЗ
    keyboard = [
        [InlineKeyboardButton("ЁЯкЩ Card Sell", callback_data="card_sell")],
        [InlineKeyboardButton("ЁЯТ╝ Wallet Setup / Rules", callback_data="wallet_rules")],
        [InlineKeyboardButton("ЁЯУЮ Contact Admin", url="https://t.me/YourAdminUsername")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи ЁЯСЗ", reply_markup=reply_markup
    )


# === Callback Menu ===
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "card_sell":
        await query.message.reply_text("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржХрж╛рж░рзНржб ржбрж┐ржЯрзЗрж▓рж╕ ржкрж╛ржарж╛ржиред")
    elif query.data == "wallet_rules":
        await query.message.reply_text(
            "ЁЯТ╝ Wallet Setup / Rules:

ржЖржкржирж╛рж░ ржУржпрж╝рж╛рж▓рзЗржЯ ржарж┐ржХрж╛ржирж╛ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржкрж╛ржарж╛ржмрзЗржиред
тЭМ ржнрзБрж▓ рждржерзНржп ржжрж┐рж▓рзЗ ржХрж╛рж░рзНржб рж░рж┐ржЬрзЗржХрзНржЯ рж╣ржмрзЗред"
        )


# === Card Submission ===
async def forward_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_list.add(user.id)  # ржЗржЙржЬрж╛рж░ рж▓рж┐рж╕рзНржЯрзЗ ржЕрзНржпрж╛ржб

    text = f"""
ЁЯУй ржирждрзБржи ржХрж╛рж░рзНржб рж╕рж╛ржмржорж┐рж╢ржи:
ЁЯСд ржирж╛ржо: {user.first_name}
ЁЯФЧ Username: @{user.username}
ЁЯЖФ User ID: {user.id}

ЁЯТ│ Card: {update.message.text}
"""
    keyboard = [
        [InlineKeyboardButton("тЬЕ Confirm", callback_data=f"confirm_{user.id}")],
        [InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(PENDING_CHANNEL, text, reply_markup=reply_markup)


# === Confirm / Reject ===
async def card_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action, user_id = query.data.split("_")
    user_id = int(user_id)

    if action == "confirm":
        await context.bot.send_message(APPROVED_CHANNEL, f"тЬЕ User {user_id} ржПрж░ ржХрж╛рж░рзНржб ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред")
        await context.bot.send_message(user_id, "ЁЯОЙ ржЖржкржирж╛рж░ ржХрж╛рж░рзНржб ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ тЬЕ")
    elif action == "reject":
        await context.bot.send_message(user_id, "тЭМ ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржХрж╛рж░рзНржб рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

    await query.answer()


# === Broadcast Command ===
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != BROADCAST_CHANNEL:
        await update.message.reply_text("тЪая╕П ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБ Broadcast ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗред")
        return

    if not context.args:
        await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: /broadcast ржЖржкржирж╛рж░_ржорзЗрж╕рзЗржЬ")
        return

    message = " ".join(context.args)

    for uid in user_list:
        try:
            await context.bot.send_message(uid, f"ЁЯУв Broadcast:
{message}")
        except:
            pass  # ржпрж╛ржжрзЗрж░ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛ рждрж╛ржжрзЗрж░ рж╕рзНржХрж┐ржк

    await update.message.reply_text("тЬЕ Broadcast ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")


# === Main ===
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_menu, pattern="^(card_sell|wallet_rules)$"))
    app.add_handler(CallbackQueryHandler(card_action, pattern="^(confirm|reject)_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_card))
    app.add_handler(CommandHandler("broadcast", broadcast))

    print("Bot is running...")
    app.run_polling()


if __name__ == "__main__":
    main()
